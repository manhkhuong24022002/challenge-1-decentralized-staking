{
  "language": "Solidity",
  "sources": {
    "contracts/ExampleExternalContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;  //Do not change the solidity version as it negativly impacts submission grading\r\n\r\ncontract ExampleExternalContract {\r\n\r\n  bool public completed;\r\n\r\n  function complete() public payable {\r\n    completed = true;\r\n  }\r\n\r\n}\r\n"
    },
    "contracts/Staker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n// import \"hardhat/console.sol\";\r\nimport \"./ExampleExternalContract.sol\";\r\n\r\ncontract Staker {\r\n    ExampleExternalContract public exampleExternalContract;\r\n    \r\n    mapping(address => uint256) public balances;\r\n    uint256 public constant threshold = 1 ether;\r\n    uint256 public deadline = block.timestamp + 72 seconds;\r\n    bool public openForWithdraw;\r\n    \r\n    event Stake(address indexed staker, uint256 amount);\r\n\r\n    constructor(address exampleExternalContractAddress) {\r\n        exampleExternalContract = ExampleExternalContract(exampleExternalContractAddress);\r\n    }\r\n\r\n    // Stake function for users to deposit ETH\r\n    function stake() public payable {\r\n        require(block.timestamp < deadline, \"Staking period is over\");\r\n        balances[msg.sender] += msg.value;\r\n        emit Stake(msg.sender, msg.value);\r\n    }\r\n\r\n    // Check the remaining time before the deadline\r\n    function timeLeft() public view returns (uint256) {\r\n        if (block.timestamp >= deadline) {\r\n            return 0;\r\n        } else {\r\n            return deadline - block.timestamp;\r\n        }\r\n    }\r\n\r\n    // Execute function to finalize the staking\r\n    function execute() public {\r\n        require(block.timestamp >= deadline, \"Deadline not reached yet\");\r\n        if (address(this).balance >= threshold) {\r\n            exampleExternalContract.complete{value: address(this).balance}();\r\n        } else {\r\n            openForWithdraw = true;\r\n        }\r\n    }\r\n\r\n    // Withdraw function for users to retrieve their funds if threshold not met\r\n    function withdraw() public {\r\n        require(openForWithdraw, \"Withdrawals are not allowed\");\r\n        uint256 userBalance = balances[msg.sender];\r\n        require(userBalance > 0, \"No balance to withdraw\");\r\n        balances[msg.sender] = 0;\r\n        payable(msg.sender).transfer(userBalance);\r\n    }\r\n\r\n    // Special receive function to accept ETH directly\r\n    receive() external payable {\r\n        stake();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}